#!/usr/bin/env ruby

# Helper for crafting Conventional Commits more easily.
#
# Call it with `concom` or alias it in bash with:
#
# ```
# alias gc='concom'
# ```

require 'bundler/inline'

begin
  gemfile do
    source 'https://rubygems.org'
    gem 'tty-prompt', '~> 0.23.1', require: false
  end
rescue => e
  puts "failed to install gems: #{e}"
  raise e
end

def err(msg)
  abort("Error: #{msg}")
end

require "tty-prompt"
prompt = TTY::Prompt.new(interrupt: :exit)

CONFIG = "concom-config.json"
default_config = {
  allow_custom_scope: true,
  allow_no_scope: true,
  breaking_changes: true,
  types: %w(feat fix chore),
  scopes: [],
}
if File.exist?(CONFIG)
  require "json"
  custom_config = JSON.parse(File.read(CONFIG))
else
  custom_config = {}
end

require "ostruct"
config = OpenStruct.new(default_config.merge(custom_config))

commit_type = prompt.select("Commit type:", config.types)

if config.breaking_changes
  breaking = prompt.yes?("Breaking change?")
else
  breaking = false
end

if config.scopes.empty?
  scope = prompt.ask("Scope (optional, [Enter] to skip):")
  scope.strip! if scope
else
  meta_scopes = []

  CUSTOM = "[custom]"
  if config.allow_custom_scope
    meta_scopes.push(CUSTOM)
  end
  NONE = "[none]"
  if config.allow_no_scope
    meta_scopes.push(NONE)
  end

  scope = prompt.select("Scope:", config.scopes.push(CUSTOM, NONE))

  case scope
  when NONE
    scope = nil
  when CUSTOM
    scope = prompt.ask("Custom scope (optional, [Enter] to skip):")
  end
end

description = prompt.ask("Description:")
if description.nil?
  err("Description is required")
else
  description.strip!
end

body = prompt.multiline("Body (optional):")
body = body.join("")

message = commit_type
if scope && !scope.empty?
  message = "#{message}(#{scope})"
end
if breaking
  message = "#{message}!"
end
message = "#{message}: #{description}"

system("git commit -m \"#{message}\" -m \"#{body}\" #{ARGV.join(" ")}", exception: true)
